21.10.2021:
created favicon - does not work yet
copied basic files from finance: templates index, layout, login, register, apology.html, application.py, styles.css, finance.db, helpers.py, requirements.txt
changed CS50 finance to "rate it" in layout.html
started to implement /register

22.10.2021
tried out some changes for the font-size of "rate it" in CSS
created a new database family
created tables family_members, destinations
open: table ratings
created new apology using a jpg from imgur
changed /register so that it uses family.db instead of finance.db

23.10.2021
changed /login so that a registerd user can login
changed items in header to destinations, books, movies
created destinations.html
started to implement /destinations: does not work yet

25.10.2021
uncomented @ line... works
added field 'rating' to table destinations
added field 'rate me' to table destinations containing link to /rate
started to implement /rate. Next step: retrieve user (using session?) and item (tricky?) and display it on rate.html

26.10.2021
removed API connection, lookup, usd: not necessary for my ap
added some text in rate.html
continued implementation of /rate
added some checks: rating provided? integer between 1 and 5?
started working with session in /login

28.10.2021
tried to pass the name of the destination in the table of destinations to /rate: without success
also tried to use button instead of <a>: without success
json? look into jinja, see bookmarks
favicon works since today without having changed anything

29.10.2021
it seems to be quite tricky to pass data from the table of destinations to /rate
instead, there could be a page where you choose your item from a drop down menu and then rate it

30.10.2021
instead of having separate links in every line of the table, added one button for rating
added one button vor adding
implemented @app.route("/add")
implemented add(): add new destination to the table: works

31.10.2021
Idea for modification: add column user (who is rating), 5 stars instead of number input (available in Bootstrap?)
deleted button "add rating", instead --> Top Ten
drop down list for destinations, that are allready in the list

01.11.2021
implemented top10.html with SELECT name + avg rating from database of all destinations
googled different ways to deploy: decided on Heroku

02.11.2021
Getting Started on Heroku:
Installed Chocolatey
Installed Python3.10
Installed PostgreSQL
Installed Git for Windows
Configured GIT
Installed Heroku CLI - Login works
Cloned Python-Getting-Started

05.11.2021
Implemented /logout
Dropdown list destination: SELECT DISTINCT: each destination only once
removed TV-Shows
to be done: add the user who rated to the destinations table
to be done: make each item in the list of destinations clickable
to be done: find a way to reuse /add and /top10 for books and movies
continued getting started on Heroku

06.11.2021
made each item in the list of destinations clickable
learned how to pass the item from the calling page into the @route: "<item>"
just in case: googled nizza-classification :-). Rate-It is probably registered.

07.11.2021
Youtube Codemy How To Use Python On A Web Page With Jinja2 - Flask Fridays #2
implemented /destination
added user_id column in destinations
SELECT ... FROM destinations JOIN family_members ON family_members.id = destinations.user_id etc.
added Header for /destination

09.11.2021
Continued Heroku getting started with python until "define config vars"

10.11.2021
Audio Book on SQL
Think Reactor AI Podcast

11.11.2021
Continued Heroku getting started with python
Database: Postgresql is more suitable for heroku than sqlite: to be changed in app
sqlalchemy might be a good choice, also demonstated in Codemy Flask Fridays (#8)

12.11.2021
Watched first two and a half videos from Codemy Flask Fridays

13.11.2021
Continued Codemy Flask Friday Videos

14.11.2021
Audio Book on SQL
Think Reactor AI Podcast

15.11.2021
Audio Book on SQL
Think Reactor AI Podcast

17.11.2021
Continued Codemy Flask Friday Videos: CSS, images, Java Script, forms with wtf, messages with flask.flash
Next step will be SQLalchemy, so first of all: get application out of cs50 world into local platform
Tasks for the next days Sublime Text, PostgreSQL, SQLalchemy, local server, later: Heroku, git, github, chocolatey, 
Downloaded the project from the CS50 world onto local PC
Idea for presentation of the final project: wortwolke24.de with all languages, platforms, etc. that I used for final project
Next step: get app run localy
git-bash / review steps for setup of the local flask server

18.11.2021
local flask server is running
pushed project to git

19.11.2021
tried out SQLalchemy

20.11.2021
tried out peewee
find out more about cursor, fetchall(), tuples, dictionarys, list, return type, execute, execute_sql, 

21.11.2021
execute_sql returns a list of tuples instead of a list of dictionaries, so rows[0][column name] is not possible

22.11.2021
App is running localy:
	Register: OK
	Register with not matching passwords: OK
	Register with missing password: OK
	Register with missing username: OK
	Login shows old data: TBD
	Login: OK
	Login with wrong password: OK
	Login with missing password: OK
	Login with missing username: OK
	/: OK
	/ Navbar: 
	/destinations: OK
	/destinations: item names displayed as links: OK
	/destinations: links are working: OK
	/destinations: "Add" and "Top 10" are displayed: OK
	/destinations: "Add" is working: OK
	/add: OK
	/add with missing Description: TBD 
	/add with missing Rating: TBD
	/top 10: OK
	/top 10 item names displayed als links: TBD
	/books: TBD
	/movies: TBD
	Logout: OK
Next steps: 
	- find a way to work with database locally
		- PHP + phpLiteAdmin
		- SQLite in git bash
		- MySQL in git bash
	- translate SQLite database into MySQL database
	- transfer to Heroku

23.11.2021
PostgresSQL was allready installed
Get familiar with Postgres with different Youtube Videos (~4-5h)
No git push today

24.11.2021
continue Youtube

25.11.2021
continue Youtube

26.11.2021
continue Youtube

28.11.2021
continue Youtube

29.11.2021
build database and tables in Postgres
where is database
how is Postgres database initialized in application.py?
cursor/fetchall/execute/SQLalchemy/etc.: how can Postgre requests be executed in the application?

30.11.2021
created new superuser "ruediger" in Postgres
created new database "rate_it" with owner "ruediger"
created tables "destinations" and "users" in "rate_it"

01.12.2021
searched for a way to get the result of request.form.get into the raw SQL

02.12.2021
the working solution with SQLalchemy and text() is:
with engine.connect() as con:
    statement = text("SELECT * FROM users WHERE name=:name").params(name=(request.form.get("username")))
    rows = con.execute(statement).fetchall()
changed all database requests accordingly

03.12.2021
repeated the complete "Getting started on Heroku with Python" tutorial
Heroku, PostgreSQL, Flask, vi, SQLalchemy, Python, pip, SQL, jinja2

04.12.2021
transfer of the local Postgre Database to Heroku
first step: pg_dump the database
took some time: did not use the right way to set PGPASSWORD, should be 'export' in git bash
finally created rate_it.dump
Added SQLalchemy to requirements.txt

05.12.2021
Tried different Procfiles without success

06.12.2021
Tried different Procfiles without success
Good explanation in Codemy Python and Flask #11
Problem was allways ModuleNotFoundError
Found solution on Stack Overflow in "Flask and Heroku - ModuleNotFoundError: No module named 'app'"
works!! Start page is displayed on Heroku. Nothing more. Trying to log in obviously crashed. 
Screenshot last Heroku log

07.12.2021
SQL audio book
KI podcast

09.12.2021
tried out different ways to transfer database to heroku
it is proposed to use Amazon S3 to upload, found Dropbox as an alternative in the internet. 

10.12.2021
using Dropbox: pg_restore: error: could not read from input file: end of file
subscribed to AWS, created bucket, created signed url
same error: pg_restore: error: could not read from input file: end of file
something went wrong during dump file creation? 

11.12.2021
Trying different ways to restore, without success

12.12.2021
different way to create the tables in the Postgresql database on heroku: db.model
started to create db.model

14.12.2021
it is as simple as heroku pg:psql to connect to database on heroku
created two tables: destinations and users
changed URI in application (long ago)
YES!!! it is possible to register two users and find them in the heroku database
Sometimes the logic works. Managed to add a new destination. This can be found in the heroku database
often the login page is displayed instead

15.12.2021
the app kept loosing session.get("user_id")
tried to figure out the reason
good hints on https://stackoverflow.com/questions/61972873/flask-session-lost-data
after definining a secret key and commenting out Session(app), the app is working. 

16.12.2021
For up to 3 minute video: installed OBS studio
tried out: works but needs improvement for video and audio
ordered microphone
Started to write README.md
TODO: clean up of the code
TODO: test of basic usage
TODO: safety (mind SQL injection)
TODO: test on mobile devices
TODO: ask other users to use web app
TODO: remove movies and books
TODO: video
TODO: README
TODO: add rating to Destination page
TODO: change order: Put add and top 10 on top of the screen or even in the navbar
TODO: On mobile phone: not enough place. Work out responsiveness.
